float operation(char op, float op1,float op2) 
{ 
switch(op) 
{ 
case '+': return(op1+op2); 
case '-': return(op1-op2); break;
case '*': return(op1*op2); 
case '/': return(op1/op2); 
case '^': return(pow(op1,op2)); 
case '%': return((int)op1%(int)op2); 
default: return(0);
} 
} 
void push(float symbol) 
{ 
s[++top] = symbol; 
} 
float pop() 
{ 
return(s[top--]); 
} 
void main() 
{ 
char postfix[25],symbol; 
float op1,op2,res;
int i; 
printf("Enter the Postfix Expression\n"); 
scanf("%s",postfix); 
for( i=0; postfix[i]!='\0'; i++ ) 
{ 
symbol = postfix[i]; 
if(isdigit(symbol)) 
push(symbol-'0'); 
else 
{ 
op2 = pop(); 
op1 = pop(); 
res = operation(symbol,op1,op2); 
push(res); 
} 
} 
res = pop(); 
printf("Result=%.2f ",res); 
}
----------------------------------------------------------------------------------------------------------------------------------------
#include<stdio.h> 
#include<string.h> 
int F(char symbol) 
{ 
switch(symbol) 
{ 
case '+' : 
case '-': return 2; 
case '*': 
case '/': return 4; 
case '^': 
case '$': return 5; 
case '(': return 0; 
case '#': return -1; 
default: return 8; 
} 
}
int G(char symbol) 
{ 
switch(symbol) 
{ 
case '+': 
case '-': return 1; 
case '*': 
case '/': return 3; 
case '^': 
case '$': return 6; 
case '(': return 9; 
case ')': return 0; 
default: return 7; 
} 
}
void infix_postfix(char infix[], char postfix[]) 
{ 
int top, j, i; 
char s[30], symbol; 
top = -1; 
s[++top] = '#'; 
j = 0; 
for(i=0; i < strlen(infix); i++) 
{ 
symbol = infix[i]; 
while(F(s[top]) > G(symbol)) 
{ 
postfix[j] = s[top--]; 
j++; 
} 
if(F(s[top]) != G(symbol)) 
s[++top] = symbol; 
else 
top--; 
} 
while(s[top] != '#') 
{ 
postfix[j++] = s[top--]; 
} 
postfix[j] = '\0'; 
} 
void main() 
{ 
char infix[20], postfix[20]; 
printf("\nEnter a valid infix expression\n"); 
gets(infix); 
infix_postfix(infix,postfix); 
printf("\nThe infix expression is:\n"); 
printf ("%s",infix); 
printf("\nThe postfix expression is:\n"); 
printf ("%s",postfix); 
}
